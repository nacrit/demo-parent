解释器模式：
    定义语言的文法，并且建立一个解释器来解释该语言中的句子。

    解释器模式组成：
        1) 抽象表达式角色：声明一个抽象的解释操作，这个接口为所有具体表达式角色（抽象语法树中的节点）都要实现的。
            什么叫做抽象语法树呢？《java 与模式》中给的解释为：抽象语法树的每一个节点都代表一个语句，而在每个节点上都可以执行解释方法。
            这个解释方法的执行就代表这个语句被解释。由于每一个语句都代表这个语句被解释。由于每一个语句都代表一个常见的问题的实例，因此每一个节点上的解释操作都代表对一个问题实例的解答。
        2) 终结符表达式角色：具体表达式。
            a) 实现与文法中的终结符相关联的解释操作
            b) 而且句子中的每个终结符需要该类的一个实例与之对应
        3) 非终结符表达式角色：具体表达式。
            a) 文法中的每条规则 R::=R1R2…Rn 都需要一个非终结符表带式角色
            b) 对于从 R1 到 Rn 的每个符号都维护一个抽象表达式角色的实例变量
            c) 实现解释操作，解释一般要递归地调用表示从 R1 到 Rn 的那些对象的解释操作
        4) 上下文（环境）角色：包含解释器之外的一些全局信息。
        5) 客户角色：
            a) 构建（或者被给定）表示该文法定义的语言中的一个特定的句子的抽象语法树
            b) 调用解释操作

    三、举例
        来举一个加减乘除的例子吧，实现思路来自于《java 与模式》中的例子。每个角色的功能按照上面提到的规范来实现。


