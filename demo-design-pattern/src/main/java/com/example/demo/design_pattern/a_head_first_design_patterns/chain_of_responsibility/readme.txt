责任链模式：
    使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。

    责任链模式由两个角色组成：
        1) 抽象处理者角色（Handler）：它定义了一个处理请求的接口。当然对于链子的不同实现，也可以在这个角色中实现后继链。
        2) 具体处理者角色（Concrete Handler）：实现抽象角色中定义的接口，并处理它所负责的请求。如果不能处理则访问它的后继者。

    适用范围：
        1) 有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。
        2) 你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。
        3) 可处理一个请求的对象集合应被动态指定。

    四、举例
    这个例子来源于项目中我刚刚完成的一个小功能点——“代号自动生成器”。在项目中存在很多地方，比如：员工工号、档案代号，要求客户在使用时输入。
    而这些代号对于一个特定的企业或者类别，往往有一定的规则。因此可以让用户在系统参数中维护一定的规则，然后通过“代号自动生成器”来给用户生成代号。
    根据初期需求，用户代号中往往存在以下几种变动元素：年份、月份、日期、流水号。
    由于需求比较简单，因此考虑到用户可能存在其他变动元素，所以我打算在“被第一颗子弹击中”后重构一下现有的结构。


    责任链模式优点，上面已经体现出来了。无非就是降低了耦合、提高了灵活性。但是责任链模式可能会带来一些额外的性能损耗，因为它每次执行请求都要从链子开头开始遍历

