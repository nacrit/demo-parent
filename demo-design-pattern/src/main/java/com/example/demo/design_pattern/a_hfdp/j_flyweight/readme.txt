享元模式：
    采用一个共享类来避免大量拥有相同内容的“小类”的开销。

    用《Java 与模式》中的分类，将享元模式分为：单纯享元模式和复合享元模式
    单纯享元模式的结构：
        1) 抽象享元角色：为具体享元角色规定了必须实现的方法，而外蕴状态就是以参数的形式通过此方法传入。在 Java 中可以由抽象类、接口来担当。
        2) 具体享元角色：实现抽象角色规定的方法。如果存在内蕴状态，就负责为内蕴状态提供存储空间。
        3) 享元工厂角色：负责创建和管理享元角色。要想达到共享的目的，这个角色的实现是关键！
        4) 客户端角色：维护对所有享元对象的引用，而且还需要存储对应的外蕴状态。
    复合享元模式的结构：
        1) 抽象享元角色：为具体享元角色规定了必须实现的方法，而外蕴状态就是以参数的形式通过此方法传入。在 Java 中可以由抽象类、接口来担当。
        2) 具体享元角色：实现抽象角色规定的方法。如果存在内蕴状态，就负责为内蕴状态提供存储空间。
        3) 复合享元角色：它所代表的对象是不可以共享的，并且可以分解成为多个单纯享元对象的组合。
        4) 享元工厂角色：负责创建和管理享元角色。要想达到共享的目的，这个角色的实现是关键！
        5) 客户端角色：维护对所有享元对象的引用，而且还需要存储对应的外蕴状态。

    例：设想一下有一个含有多个属性的对象，要被创建一百万次，并使用它们。ExternalizedData：

五、使用优缺点
    享元模式优点就在于它能够大幅度的降低内存中对象的数量；而为了做到这一步也带来了它的缺点：它使得系统逻辑复杂化，而且在一定程度上外蕴状态影响了系统的速度。
    所以一定要切记使用享元模式的条件：
        1)系统中有大量的对象，他们使系统的效率降低。
        2)这些对象的状态可以分离出所需要的内外两部分。

    5.使用场景
        系统中存在大量相似对象
        需要缓冲池的场景
    6. 应用实例
        String常量池
        数据库连接池

    四、举例
        享元模式如何来共享内蕴状态的？在能见到的教学代码中，大概有两种实现方式：实用列表记录（或者缓存）已存在的对象和使用静态属性。
        下面的例子来自于 Bruce Eckel 的《Thinking in Patterns with java》一书。设想一下有一个含有多个属性的对象，要被创建一百万次，
        并使用它们。这时候正是使用享元模式的好时机：