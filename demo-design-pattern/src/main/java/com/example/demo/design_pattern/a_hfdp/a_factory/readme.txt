工厂模式:主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来， 达到提高灵活性的目的
优点：
1、一个调用者想创建一个对象，只要知道其名称就可以了。
2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
3、屏蔽产品的具体实现，调用者只关心产品的接口。
缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。
使用场景：
1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。
2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。
3、设计一个连接服务器的框架，需要三个协议，"POP3"、"IMAP"、"HTTP"，可以把这三个作为产品类，共同实现一个接口。

1）简单工厂模式（Simple Factory）
    组成：工厂类角色、抽象产品角色、具体产品角色
    简单工厂的可扩展性不好，每当我们添加一种交通工具，都要重新写一个方法，方法里面的东西都要重写。
    JDK案例：
        java.text.DateFormat：
            public final static DateFormat getDateInstance();
            public final static DateFormat getDateInstance(int style);
            public final static DateFormat getDateInstance(int style,Locale locale);
        KeyGenerator#getInstance
    分析：
        简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，
        但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。
        简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。

2）工厂方法模式（Factory Method）(针对每一种产品来做一个工厂。这种方法叫工厂方法。)
   组成：抽象工厂角色、具体工厂角色、抽象产品角色、具体产品角色
   在下面情 况下你可以考虑使用工厂方法模式：
        1) 当客户程序不需要知道要使用对象的创建过程。
        2) 客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。
    JDBC案例：
        Connection conn=DriverManager.getConnection("jdbc:microsoft:sqlserver://localhost:1433; DatabaseName=DB;user=sa;password=");
        Statement statement=conn.createStatement();
        ResultSet rs=statement.executeQuery("select * from UserInfo");
    总结：
        工厂方法模式的主要优点:用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。
            增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；
        其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。

3）抽象工厂模式（Abstract Factory）
    抽象工厂角色、具体工厂角色、抽象产品角色、具体产品角色
    抽象工厂模式的用意为：给客户端提供一个接口，可以创建多个产品族中的产品对象 而且使用抽象工厂模式还要满足一下条件：
        1) 系统中有多个产品族，而系统一次只可能消费其中一族产品。
        2) 同属于同一个产品族的产品以其使用。 来看看抽象工厂模式的各个角色（和工厂方法的如出一辙）：
    模式应用：
        在很多软件系统中需要更换界面主题，要求界面中的按钮、文本框、背景色等一起发生改变时，可以使用抽象工厂模式进行设计。
    优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。
    缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。
    总结：
        抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。
        抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；
            抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。
        抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。
        抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；
            主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。
        抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；
            属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。



