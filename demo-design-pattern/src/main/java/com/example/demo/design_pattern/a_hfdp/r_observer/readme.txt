观察者（Observer）模式(发布-订阅（Publish/Subscribe）模式)：
    定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。

    观察者模式的组成部分。
    1) 抽象目标角色（Subject）：目标角色知道它的观察者，可以有任意多个观察者观察同一个目标。
        并且提供注册和删除观察者对象的接口。目标角色往往由抽象类或者接口来实现。
    2) 抽象观察者角色（Observer）：为那些在目标发生改变时需要获得通知的对象定义一个更新接口。
        抽象观察者角色主要由抽象类或者接口来实现。
    3) 具体目标角色（Concrete Subject）：将有关状态存入各个 Concrete Observer 对象。当它的状态发生改变时, 向它的各个观察者发出通知。
    4) 具体观察者角色（Concrete Observer）：存储有关状态，这些状态应与目标的状态保持一致。
        实现 Observer 的更新接口以使自身状态与目标的状态保持一致。在本角色内也可以维护一个指向 Concrete Subject 对象的引用。


    三、举例
        观察者模式是我在《JUnit 源代码分析》中遗留的一个模式，因此这里将采用 JUnit 来
        作为例子。JUnit 为用户提供了三种不同的测试结果显示界面，以后还可能会有其它方式的
        现实界面……。怎么才能将测试的业务逻辑和显示结果的界面很好的分离开？不用问，就是观察者模式！
