桥梁模式：
    将抽象部分与它的实现部分分离，使它们都可以独立地变化。
    你可以分析变化的种类，将不变的框架使用抽象类定义出来，然后再将变化的内容使用具体的子类来分别实现。

    桥梁模式组成：
        1) 抽象（Abstraction）角色：它定义了抽象类的接口而且维护着一个指向实现（Implementor）角色的引用。
        2) 精确抽象（RefinedAbstraction）角色：实现并扩充由抽象角色定义的接口。
        3) 实现（Implementor）角色：给出了实现类的接口，这里的接口与抽象角色中的接口可以不一致。
        4) 具体实现（ConcreteImplementor）角色：给出了实现角色定义接口的具体实现。

Bruce Eckel 在《Thinking in patterns with Java》中提到，可以把桥梁模式当作帮助你编码前端和后端独立变化的框架。
在《设计模式》一书中提到了使用抽象工厂模式来创建和配置一个桥梁模式。在上面的例子中也使用到了工厂方法模式来得到具体的实现部分。




